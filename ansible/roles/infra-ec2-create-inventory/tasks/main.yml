- name: debug ec2_facts
  debug:
    var: aws_region_final|d(aws_region)
    verbosity: 2

- name: Gather EC2 facts
  ec2_instance_facts:
    aws_access_key: "{{ aws_access_key_id }}"
    aws_secret_key: "{{ aws_secret_access_key }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    filters:
      "tag:Project": "{{project_tag}}"
  register: ec2_facts
  tags:
    - create_inventory
    - must

- name: debug ec2_facts
  debug:
    var: ec2_facts
    verbosity: 2

- name: windows ostype workaround
  set_fact:
    project_tag_ostype: "{{project_tag}}_ostype"
  tags:
    - create_inventory
    - must

- set_fact:
    stack_tag: "{{env_type | replace('-', '_')}}_{{guid}}"
  tags:
    - create_inventory
    - must

# Find the bastion
- name: Find the bastion in this batch of host
  set_fact:
    local_bastion: "{{ item.tags.internaldns }}"
  when:
    - item.state.name != 'terminated'
    - '"bastions" in item.tags.AnsibleGroup'
  with_items: "{{ec2_facts['instances']}}"
  loop_control:
    label: "{{item.tags.internaldns | default(item.private_dns_name)}}"
  ignore_errors: yes

# - debug:
#     var: "{{ item }}"
#   with_items: "{{ec2_facts['instances']}}"

- name: Add Linux hosts
  add_host:
    name: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    shortname: "{{item.tags.Name | default(item.private_dns_name)}}"
    groups:
      - "tag_Project_{{stack_tag}}"
      - "tag_{{stack_tag}}_{{item['tags'][project_tag] | default('unknowns')}}"
      - "tag_{{stack_tag}}_ostype_{{item['tags'][project_tag_ostype] | default('unknown')}}"
      - "{{item.tags.ostype | default('unknowns')}}"
      - "{{item['tags'][project_tag_ostype] | default('unknowns')}}"
      - "{{ 'newnodes' if (item.tags.newnode|d()|bool) else 'all'}}"
    ansible_user: ec2-user
    remote_user: ec2-user
    ansible_ssh_private_key_file: "{{item['key_name']}}"
    key_name: "{{item['key_name']}}"
    state: "{{item['state']}}"
    internaldns: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    isolated: "{{item.tags.isolated | default(false)}}"
    instance_id: "{{ item.instance_id }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    public_dns_name: "{{item['public_dns_name']}}"
    private_dns_name: "{{item['private_dns_name']}}"
    private_ip_address: "{{item['private_ip_address']}}"
    public_ip_address: "{{item['public_ip_address'] | d('') }}"
    placement: "{{item['placement']['availability_zone']}}"
    image_id: "{{item['image_id']}}"
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    bastion: "{{ local_bastion | default('') }}"
    ostype: "{{item.tags.ostype | default('linux')}}"
    instance_name: "{{item.tags.instance_name  | d('') }}"
  when:
    - item.state.name != 'terminated'
    - item.tags.ostype | d('linux') == 'linux'
  with_items: "{{ec2_facts['instances']}}"
  loop_control:
    label: "{{item.tags.internaldns | default(item.private_dns_name)}}"
  tags:
    - create_inventory
    - must

- name: Add Windows hosts - winrm
  add_host:
    name: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    shortname: "{{item.tags.Name | default(item.private_dns_name)}}"
    groups:
      - "tag_Project_{{stack_tag}}"
      - "tag_{{stack_tag}}_{{item['tags'][project_tag] | default('unknowns')}}"
      - "tag_{{stack_tag}}_ostype_{{item['tags'][project_tag_ostype] | default('unknown')}}"
      - "{{item.tags.ostype | default('unknowns')}}"
      - "{{item['tags'][project_tag_ostype] | default('unknowns')}}"
      - "{{ 'newnodes' if (item.tags.newnode|d()|bool) else 'all'}}"
    ansible_user: Administrator
    remote_user: Administrator
    ansible_connection: winrm
    ansible_password: "{{ hostvars['localhost'].windows_password | default(hostvars['localhost'].generated_windows_password) }}"
    ansible_port: 5986
    ansible_winrm_server_cert_validation: ignore
    key_name: "{{item['key_name']}}"
    state: "{{item['state']}}"
    internaldns: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    isolated: "{{item.tags.isolated | default(false)}}"
    instance_id: "{{ item.instance_id }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    public_dns_name: "{{item['public_dns_name']}}"
    private_dns_name: "{{item['private_dns_name']}}"
    private_ip_address: "{{item['private_ip_address']}}"
    public_ip_address: "{{item['public_ip_address'] | d('') }}"
    placement: "{{item['placement']['availability_zone']}}"
    image_id: "{{item['image_id']}}"
    bastion: "{{ local_bastion | default('') }}"
    ostype: "{{item.tags.ostype | default('windows') }}"
    instance_name: "{{item.tags.instance_name | d('') }}"
  when:
    - item.state.name != 'terminated'
    - item.tags.ostype | d('linux') == 'windows'
    - win_connect_method == 'winrm'
  with_items: "{{ec2_facts['instances']}}"
  loop_control:
    label: "{{item.tags.internaldns | default(item.private_dns_name)}}"
  tags:
    - create_inventory
    - must

- name: Add Windows Hosts - psrp
  add_host:
    name: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    shortname: "{{item.tags.Name | default(item.private_dns_name)}}"
    groups:
      - "tag_Project_{{stack_tag}}"
      - "tag_{{stack_tag}}_{{item['tags'][project_tag] | default('unknowns')}}"
      - "tag_{{stack_tag}}_ostype_{{item['tags'][project_tag_ostype] | default('unknown')}}"
      - "{{item.tags.ostype | default('unknowns')}}"
      - "{{item['tags'][project_tag_ostype] | default('unknowns')}}"
      - "{{ 'newnodes' if (item.tags.newnode|d()|bool) else 'all'}}"
    ansible_user: Administrator
    remote_user: Administrator
    ansible_connection: psrp
    ansible_password: "{{ hostvars['localhost'].windows_password | default(hostvars['localhost'].generated_windows_password) }}"
    ansible_psrp_protocol: https
    ansible_psrp_auth: basic
    ansible_psrp_cert_validation: ignore
    ansible_psrp_proxy: "socks5h://localhost:{{psrp_socks_port}}"
    key_name: "{{item['key_name']}}"
    state: "{{item['state']}}"
    internaldns: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    isolated: "{{item.tags.isolated | default(false)}}"
    instance_id: "{{ item.instance_id }}"
    region: "{{ aws_region_final | default(aws_region) | default(region) | default('us-east-1')}}"
    public_dns_name: "{{item['public_dns_name']}}"
    private_dns_name: "{{item['private_dns_name']}}"
    private_ip_address: "{{item['private_ip_address']}}"
    public_ip_address: "{{item['public_ip_address'] | d('') }}"
    placement: "{{item['placement']['availability_zone']}}"
    image_id: "{{item['image_id']}}"
    bastion: "{{ local_bastion | default('') }}"
    ostype: "{{item.tags.ostype | default('windows') }}"
    instance_name: "{{item.tags.instance_name | d('') }}"
  when:
    - item.state.name != 'terminated'
    - item.tags.ostype | d('linux') == 'windows'
    - win_connect_method == 'psrp'
  with_items: "{{ec2_facts['instances']}}"
  loop_control:
    label: "{{item.tags.internaldns | default(item.private_dns_name)}}"
  tags:
    - create_inventory
    - must

# AnsibleGroup tag can have several comma-separated values. Ex: activedirectories,windows
- add_host:
    name: "{{item.tags.internaldns | default(item.private_dns_name)}}"
    groups: "{{item.tags.AnsibleGroup}}"
  with_items: "{{ec2_facts['instances']}}"
  when: item.state.name != 'terminated'
  loop_control:
    label: "{{item.tags.internaldns | default(item.private_dns_name)}}"
  tags:
    - create_inventory
    - must

- name: debug hostvars
  debug:
    var: hostvars
    verbosity: 2

- name: debug groups
  debug:
    var: groups
    verbosity: 2
